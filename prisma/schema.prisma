generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(cuid())
  username         String            @unique
  email            String            @unique
  image            String?
  password         String
  number           String?
  createdAt        DateTime          @default(now())
  currentGroup     Group?            @relation("UserGroup", fields: [groupId], references: [id])
  groupId          Int?
  createdGroups    Group[]           @relation("GroupCreator")
  groupInvitations GroupInvitation[] @relation("UserGroupInvitations")
  tasks            Task[]            @relation("UserTasks") // This defines the relation
  role             Role              @default(USER)
  TaskAssignment   TaskAssignment[]
  Account          Account[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Group {
  id          Int               @id @default(autoincrement())
  name        String
  creator     User              @relation("GroupCreator", fields: [creatorId], references: [id])
  creatorId   String
  members     User[]            @relation("UserGroup")
  invitations GroupInvitation[] @relation("GroupInvitations")
  tasks       Task[]            @relation("GroupTasks")
  isApproved  Boolean           @default(false)
  createdAt   DateTime          @default(now())
}

model Task {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  deadline    DateTime
  completed   Boolean          @default(false)
  groupId     Int?
  group       Group?           @relation("GroupTasks", fields: [groupId], references: [id])
  assignments TaskAssignment[]
  users       User[]           @relation("UserTasks") // This defines the relation
}

model TaskAssignment {
  id          Int       @id @default(autoincrement())
  taskId      Int
  userId      String
  completed   Boolean   @default(false)
  completedAt DateTime?
  assignedAt  DateTime  @default(now())

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model GroupInvitation {
  id        Int              @id @default(autoincrement())
  groupId   Int
  userId    String
  status    InvitationStatus @default(PENDING)
  invitedAt DateTime         @default(now())

  group Group @relation("GroupInvitations", fields: [groupId], references: [id])
  user  User  @relation("UserGroupInvitations", fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}
